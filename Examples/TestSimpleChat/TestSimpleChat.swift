import SwiftUI

@main
struct TestSimpleChatApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}

struct ContentView: View {
    @State private var messages: [ChatMessage] = []
    @State private var inputText = ""
    @State private var isLoading = false
    
    var body: some View {
        NavigationView {
            VStack {
                // Messages list
                ScrollView {
                    LazyVStack(alignment: .leading, spacing: 12) {
                        ForEach(messages) { message in
                            MessageBubble(message: message)
                        }
                        
                        if isLoading {
                            HStack {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle())
                                Text("Thinking...")
                                    .foregroundColor(.secondary)
                            }
                            .padding()
                        }
                    }
                    .padding()
                }
                
                Divider()
                
                // Input area
                HStack {
                    TextField("Type a message...", text: $inputText)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(isLoading)
                    
                    Button("Send") {
                        sendMessage()
                    }
                    .disabled(inputText.isEmpty || isLoading)
                }
                .padding()
            }
            .navigationTitle("EdgeLLM Test Chat")
            .onAppear {
                // Add welcome message
                messages.append(ChatMessage(
                    role: .assistant,
                    content: "Hello! I'm EdgeLLM running on-device. Send me a message to test!"
                ))
            }
        }
    }
    
    private func sendMessage() {
        let userMessage = ChatMessage(role: .user, content: inputText)
        messages.append(userMessage)
        
        let prompt = inputText
        inputText = ""
        isLoading = true
        
        Task {
            do {
                // Mock response for now (since we can't link MLC libraries in macOS)
                try await Task.sleep(nanoseconds: 1_000_000_000) // 1 second
                
                let response = """
                This is a mock response from EdgeLLM.
                Your message was: "\(prompt)"
                
                In a real implementation, this would be generated by:
                • Qwen3-0.6B model running on-device
                • Using Metal GPU acceleration
                • With full privacy (no cloud dependency)
                """
                
                await MainActor.run {
                    messages.append(ChatMessage(role: .assistant, content: response))
                    isLoading = false
                }
                
            } catch {
                await MainActor.run {
                    messages.append(ChatMessage(
                        role: .assistant,
                        content: "Error: \(error.localizedDescription)"
                    ))
                    isLoading = false
                }
            }
        }
    }
}

struct ChatMessage: Identifiable {
    let id = UUID()
    let role: Role
    let content: String
    
    enum Role {
        case user
        case assistant
    }
}

struct MessageBubble: View {
    let message: ChatMessage
    
    var body: some View {
        HStack {
            if message.role == .user {
                Spacer()
            }
            
            VStack(alignment: message.role == .user ? .trailing : .leading) {
                Text(message.role == .user ? "You" : "EdgeLLM")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(message.content)
                    .padding(12)
                    .background(
                        message.role == .user ? 
                            Color.blue.opacity(0.1) : 
                            Color.gray.opacity(0.1)
                    )
                    .cornerRadius(12)
            }
            
            if message.role == .assistant {
                Spacer()
            }
        }
    }
}